"use strict";function PWA(){return{app:(swURL,onInstallReady=null,onUpdateReady=null,onRefreshReady=null,cacheName="resources")=>{navigator.serviceWorker.register(swURL);const getServiceWorker=async()=>await navigator.serviceWorker.getRegistration();return window.addEventListener("beforeinstallprompt",e=>{onInstallReady&&"function"==typeof onInstallReady&&onInstallReady(async cb=>{e.prompt(),e.userChoice.then(result=>{cb&&"function"==typeof cb&&cb(result)})})}),navigator.serviceWorker.addEventListener("message",e=>{e.data.msg&&"refresh"===e.data.msg&&e.data&&e.data.url&&location.href===e.data.url&&onRefreshReady&&"function"==typeof onRefreshReady&&onRefreshReady(!0)}),navigator.serviceWorker.getRegistration().then(reg=>{reg&&reg.addEventListener("updatefound",()=>{onUpdateReady&&"function"==typeof onUpdateReady&&onUpdateReady(!0)})}),{getServiceWorker:getServiceWorker,RESET:async()=>{caches.delete(cacheName),await getServiceWorker().then(reg=>{reg.unregister().then(()=>{location.reload()}).catch(err=>{location.reload()})})}}},sw:(cacheName=[],offlineURL=null)=>{offlineURL&&!cacheName.includes(offlineURL)&&cacheName.push(offlineURL),self.addEventListener("install",async e=>{console.log("Installing Service Worker..."),await caches.delete(cacheName);let cache=await caches.open(cacheName);return await cache.addAll(cacheName),self.skipWaiting()}),self.addEventListener("activate",async e=>{console.log("Service Worker Activated!")});self.addEventListener("fetch",async e=>{"GET"===e.request.method&&e.respondWith((async()=>{let cache=await caches.open(cacheName),cached=await cache.match(e.request,{ignoreSearch:!0});return cached?(e.waitUntil((async request=>fetch(request).then(async response=>{if(200===response.status){let cache=await caches.open(cacheName),cached=await cache.match(request);if(cached&&response.headers.get("eTag")!==cached.headers.get("eTag")){await cache.put(request,response.clone());let allClients=await clients.matchAll();for(let client of allClients)client.postMessage({msg:"refresh",url:request.url});return}}}).catch(err=>{}))(e.request)),cached):fetch(e.request).then(async response=>(200===response.status&&await cache.put(e.request,response.clone()),response)).catch(err=>cache.match("/offline"))})())});return{}}}}