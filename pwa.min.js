"use strict";function PWA(){return{app:(swURL,onInstallReady=null,onUpdateReady=null,cacheName="resources")=>{navigator.serviceWorker.register(swURL);const getServiceWorker=async()=>await navigator.serviceWorker.getRegistration();return window.addEventListener("beforeinstallprompt",function(e){onInstallReady&&"function"==typeof onInstallReady&&onInstallReady(async cb=>{e.prompt(),e.userChoice.then(result=>{cb&&"function"==typeof cb&&cb(result)})})}),navigator.serviceWorker.getRegistration().then(reg=>{reg&&reg.addEventListener("updatefound",()=>{onUpdateReady&&"function"==typeof onUpdateReady&&onUpdateReady(!0)})}),{getServiceWorker:getServiceWorker,RESET:async()=>{caches.delete(cacheName),await getServiceWorker().then(reg=>{reg.unregister().then(()=>{location.reload()}).catch(err=>{location.reload()})})}}},sw:(cacheName=[],offlineURL=null)=>{offlineURL&&!cacheName.includes(offlineURL)&&cacheName.push(offlineURL),self.addEventListener("install",async e=>{console.log("Installing Service Worker..."),await caches.delete(cacheName);let cache=await caches.open(cacheName);return await cache.addAll(cacheName),self.skipWaiting()}),self.addEventListener("activate",async e=>{console.log("Service Worker Activated!")}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method)return null;e.respondWith(fetch(e.request).then(async response=>{if(!response)return offlineURL?caches.match(offlineURL):null;if(response.status>499){let cached=await caches.match(e.request);if(cached)return cached;if(offlineURL)return caches.match(offlineURL)}return(await caches.open(cacheName)).put(e.request,response.clone()),response}).catch(async err=>{let cached=await caches.match(e.request);return cached||(offlineURL?caches.match(offlineURL):void 0)}))});return{}}}}