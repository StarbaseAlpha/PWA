"use strict";function PWA(){return{app:(swURL,onInstallReady)=>{navigator.serviceWorker.register(swURL);const getServiceWorker=async()=>await navigator.serviceWorker.getRegistration();return window.addEventListener("beforeinstallprompt",function(e){onInstallReady&&"function"==typeof onInstallReady&&onInstallReady(async cb=>{e.prompt(),e.userChoice.then(result=>{cb&&"function"==typeof cb&&cb(result)})})}),{getServiceWorker:getServiceWorker,RESET:async()=>{(await getServiceWorker()).unregister().then(()=>{location.reload()})}}},sw:(resources=[],offlineURL=null)=>{offlineURL&&!resources.includes(offlineURL)&&resources.push(offlineURL),self.addEventListener("install",async e=>{console.log("Installing Service Worker..."),await caches.delete("resources");let cache=await caches.open("resources");return await cache.addAll(resources),self.skipWaiting()}),self.addEventListener("activate",async e=>{console.log("Service Worker Activated!")}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method)return null;e.respondWith(fetch(e.request).then(async response=>{if(!response)return offlineURL?caches.match(offlineURL):null;if(response.status>499){let cached=await caches.match(e.request);if(cached)return cached;if(offlineURL)return caches.match(offlineURL)}return(await caches.open("resources")).put(e.request,response.clone()),response}).catch(async err=>{let cached=await caches.match(e.request);return cached||(offlineURL?caches.match(offlineURL):void 0)}))});return{}}}}